    {% spaceless %}
{#{{ dump(value['selected']|default('')) }}#}
{#{{ dump(multiple) }}#}
<select type="text" 
        name="{{ full_name }}" 
        id="{{ id }}_autocomplete_input"
        style="width: 300px"
        {% if multiple -%}multiple="multiple"{% endif %}
        {%- if read_only %} readonly="readonly"{% endif -%}
            {%- if disabled %} disabled="disabled"{% endif -%}
                {%- if required %} required="required"{% endif %}
                    >
                    {% if multiple -%}
                        {%- for idx, val in value['selected'] -%}
                        <option {%- if disabled %} disabled="disabled"{% endif %} selected="selected" value="{{ val["id"] }}" >{{ val["text"] }}</option>
                        {%- endfor -%}
                    {% else -%}
                        <option {%- if disabled %} disabled="disabled"{% endif %} value="{{ value['selected'][0]['id']|default('') }}" selected="selected" >{{ value['selected'][0]['text']|default('') }}</option>
                    {% endif -%}
                </select>
                <div id="{{ id }}_hidden_inputs_wrap">
                    {% if multiple -%}
                        {%- for idx, val in value['selected'] -%}
                        <input type="hidden" name="{{ full_name }}[]" {%- if disabled %} disabled="disabled"{% endif %} value="{{ val["id"] }}">
                        {%- endfor -%}
                    {% else -%}
                        <input type="hidden" name="{{ full_name }}" {%- if disabled %} disabled="disabled"{% endif %} value="{{ value['selected'][0]['id']|default('') }}">
                    {% endif -%}
                </div>

                <script type="text/javascript">
                    $(document).ready(function () {

                        var autocompleteInput = $('#{{ id }}_autocomplete_input');

                        $(autocompleteInput).select2({
                            ajax: {
                                url: '{{ url ?: path(route.name, route.parameters|default([])) }}',
                                dataType: 'json',
                                delay: 250,
                                data: function (params) {
                                    return {
                                        '{{ req_param_name_search }}': params.term, // search term
                                        page: params.page,
                                         // page size
                                        '{{ req_param_name_items_per_page }}': {{ items_per_page }},

                                        // page number
                                        '{{ req_param_name_page_number }}': params.page,
                                        'entity_alias': '{{ entity_alias }}',

                                        {% if context == 'filter' %}
                                            'field':  '{{ full_name|replace({'filter[': '', '][value]': '', '__':'.'}) }}',
                                            '_context': 'filter'
                                        {% else %}
                                            'field':  '{{ name }}'
                                        {% endif %}

                                        // other parameters
                                        {% if req_params is not empty %},
                                            {%- for key, value in req_params -%}
                                                '{{- key|e('js') -}}': '{{- value|e('js') -}}'
                                                {%- if not loop.last -%}, {% endif -%}
                                            {%- endfor -%}
                                        {% endif %}
                                    };
                                },
                                processResults: function (data, params) {
                                    // parse the results into the format expected by Select2
                                    // since we are using custom formatting functions we do not need to
                                    // alter the remote JSON data, except to indicate that infinite
                                    // scrolling can be used
                                    params.page = params.page || 1;

                                    return {
                                        results: data.items,
                                        pagination: {
                                            more: data.more
                                        }
                                    };
                                },
                                cache: true
                            },
                            escapeMarkup: function (markup) {
                                return markup;
                            }, // let our custom formatter work
                            minimumInputLength: 1,
                            templateResult: function(item){
                                if(item.loading){
                                    return item.text;
                                }
                                return item.text;
                            }, // omitted for brevity, see the source of this page
                            templateSelection: function(item){
                                if(item.loading){
                                    return item.text;
                                }
                                return item.text;
                            } // omitted for brevity, see the source of this page
                        });

                    {#autocompleteInput.select2(
                    {
                        {%- set allowClearPlaceholder = (not multiple and not required) ? ' ' : '' -%}
                        placeholder: '{{ placeholder ?: allowClearPlaceholder }}', // allowClear needs placeholder to work properly
                        allowClear: {{ required ? 'false' : 'true' }},
                        enable: {{ disabled ? 'false' : 'true' }},
                        readonly: {{ read_only ? 'true' : 'false' }},
                        minimumInputLength: {{ minimum_input_length }},
                        multiple: {{ multiple ? 'true' : 'false' }},
                        width: '{{ width }}',
                        dropdownAutoWidth: {{ dropdown_auto_width ? 'true' : 'false' }},
                        ajax: {
                            url:  '{{ url ?: path(route.name, route.parameters|default([])) }}',
                            dataType: 'json',
                            delay: 250,
                            data: function (params) { // page is the one-based page number tracked by Select2
                                {% block sonata_type_model_autocomplete_ajax_request_parameters %}
                                return {
                                        //search term
                                        '{{ req_param_name_search }}': params.term,
                                        page: params.page,

                                        // page size
                                        '{{ req_param_name_items_per_page }}': {{ items_per_page }},

                                        // page number
                                        '{{ req_param_name_page_number }}': params.page,
                                        'entity_alias': '{{ entity_alias }}',

                                        {% if context == 'filter' %}
                                            'field':  '{{ full_name|replace({'filter[': '', '][value]': '', '__':'.'}) }}',
                                            '_context': 'filter'
                                        {% else %}
                                            'field':  '{{ name }}'
                                        {% endif %}

                                        // other parameters
                                        {% if req_params is not empty %},
                                            {%- for key, value in req_params -%}
                                                '{{- key|e('js') -}}': '{{- value|e('js') -}}'
                                                {%- if not loop.last -%}, {% endif -%}
                                            {%- endfor -%}
                                        {% endif %}
                                };
                                {% endblock %}
                            },
                            processResults: function (data, params) {
                                params.page = params.page || 1;
                                // notice we return the value of more so Select2 knows if more results can be loaded
                                return {
                                    results: data.items, 
                                    pagination: {
                                      more: data.more
                                    }
                                };
                            }
                        },
                        templateResult: function (item) {
                            if(item.loading === true){
                                return
                            }
                            return {% block sonata_type_model_autocomplete_dropdown_item_format %}'<div class="{{ dropdown_item_css_class }}">'+item.name+'<\/div>'{% endblock %};// format of one dropdown item
                        },
                        templateSelection: function (item) {
                            return {% block sonata_type_model_autocomplete_selection_format %}item.name{% endblock %};// format selected item '<b>'+item.label+'</b>';
                        },
                        escapeMarkup: function (m) { return m; } // we do not want to escape markup since we are displaying html in results
                    });#}

                    autocompleteInput.on('select2:select', function(e) {
                        var addedItems = e.params.data;

                        {% if multiple %}
                            if(!$.isArray(addedItems)) {
                                addedItems = [addedItems];
                            }

                            var length = addedItems.length;
                            for (var i = 0; i < length; i++) {
                                el = addedItems[i];
                                $('#{{ id }}_hidden_inputs_wrap').append('<input type="hidden" name="{{ full_name }}[]" value="'+el.id+'" />');
                            }
                        {%- else -%}
                            $('#{{ id }}_hidden_inputs_wrap input:hidden').val(addedItems.id);
                        {%- endif %}
                    });
                    autocompleteInput.on('select2:unselect', function(e) {
                        var removedItems = e.params.data;

                        {% if multiple %}
                            if(!$.isArray(removedItems)) {
                                removedItems = [removedItems];
                            }

                            var length = removedItems.length;
                            for (var i = 0; i < length; i++) {
                                el = removedItems[i];
                                $('#{{ id }}_hidden_inputs_wrap input:hidden[value="'+el.id+'"]').remove();
                            }
                        {%- else -%}
                            $('#{{ id }}_hidden_inputs_wrap input:hidden').val('');
                        {%- endif %}
                    });
{#
                    // Initialise the autocomplete
                    var data = [];

                    {%- if value is not empty -%}
                        data = {%- if multiple -%}[ {%- endif -%}
                        {%- for idx, val  in value if idx~'' != '_labels' -%}
                            {%- if not loop.first -%}, {% endif -%}
                            {id: '{{ val|e('js') }}', name:'{{ value['_labels'][idx]|e('js') }}'}
                        {%- endfor -%}
                        {%- if multiple -%} ] {%- endif -%};
                    {% endif -%}

                    if (undefined == data.length || 0 < data.length) { // Leave placeholder if no data set
                        autocompleteInput.select2('data', data);
                        autocompleteInput.select2('val', data);
                    }#}
                    {#{% if multiple -%}
                    
                    {% else -%}
                        //console.log("{{ value[0]|default('') }}");
                    {% endif -%}#}

                            // remove unneeded autocomplete text input before form submit
                    {#$('#{{ id }}_autocomplete_input').closest('form').submit(function()
                    {
                        $('#{{ id }}_autocomplete_input').remove();
                        return true;
                    });#}
                        });
                </script>
                    {% endspaceless %}