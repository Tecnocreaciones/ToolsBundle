{% spaceless %}

    {{ form_widget(form.title) }}

    {% for child in form %}
        {% if not child.rendered %}
            {{ form_widget(child) }}
        {% endif %}
    {% endfor %}

    <script>
         jQuery(document).ready(function () {
             // Initialise the autocomplete
            var data = [];
            {% if multiple -%}
                data = [
                {%- for key, label_text in value.labels -%}
                    {id: '{{ value.identifiers[key]|e('js') }}', label:'{{ label_text|e('js') }}'}
                    {%- if not loop.last -%}, {% endif -%}
                {%- endfor -%}
                ];
            {%- elseif value.labels[0] is defined -%}
                data = {id: '{{ value.identifiers[0]|e('js') }}', label:'{{ value.labels[0]|e('js') }}'};
            {%- endif  %}
            getInit = function (element, callback) {
                callback(data);
            };
            
            var autocompleteInput = $("#{{ form.title.vars.id }}");
            autocompleteInput.removeAttr("name");
            autocompleteInput.select2({
                placeholder: "{{ placeholder }}",
                allowClear: {{ required ? 'false' : 'true' }},
                enable: {{ disabled ? 'false' : 'true' }},
                readonly: {{ read_only ? 'true' : 'false' }},
                minimumInputLength: {{ minimum_input_length }},
                multiple: {{ multiple ? 'true' : 'false' }},
                ajax: {
                    url:  "{{ url ?: url(route.name, route.parameters|default([]))|e('js') }}",
                    dataType: 'json',
                    quietMillis: 100,
                    data: function (params, page) { // page is the one-based page number tracked by Select2
                        
                        return {
                                //search term
                                "{{ req_param_name_search }}": params.term,

                                // page size
                                "{{ req_param_name_items_per_page }}": {{ items_per_page }},

                                // page number
                                "{{ req_param_name_page_number }}": page,
                                page: params.page,

                                // admin
                                'entity_alias': '{{ entity_alias }}',

                                {% if context == 'filter' %}
                                    'field':  '{{ full_name|replace({'filter[': '', '][value]': '', '__':'.'}) }}',
                                    '_context': 'filter'
                                {% else %}
                                    'field':  '{{ name }}'
                                {% endif %}

                                // other parameters
                                {% if req_params is not empty %},
                                    {%- for key, value in req_params -%}
                                        "{{- key|e('js') -}}": "{{- value|e('js') -}}"
                                        {%- if not loop.last -%}, {% endif -%}
                                    {%- endfor -%}
                                {% endif %}
                            };
                    },
                    processResults: function (data, page) {
                        // notice we return the value of more so Select2 knows if more results can be loaded
                        return {results: data.items, pagination: {
                                more: data.more
                        }};
                    }
                },
                formatResult: function (item) {
                    return {% block sonata_type_model_autocomplete_dropdown_item_format %}'<div class="sonata-autocomplete-dropdown-item">'+item.label+'</div>'{% endblock %};// format of one dropdown item
                },
                formatSelection: function (item) {
                    return {% block sonata_type_model_autocomplete_selection_format %}item.label{% endblock %};// format selected item '<b>'+item.label+'</b>';
                },
                //dropdownCssClass: "{{ dropdown_css_class }}",
                escapeMarkup: function (m) { return m; }, // we do not want to escape markup since we are displaying html in results
                //initSelection : getInit,
            });
            

            autocompleteInput.on("select2:select", function(e) {
                console.log("select2:unselect");
                //console.log("change "+JSON.stringify({val:e.val, added:e.added, removed:e.removed}));
                var addedItems = e.params.data;
                console.log(addedItems);
                // add new input
                var el = null;
                if (undefined !== addedItems) {

                    {% if multiple %}
                        if(!$.isArray(addedItems)) {
                            addedItems = [addedItems];
                        }

                        var length = addedItems.length;
                        for (var i = 0; i < length; i++) {
                            el = addedItems[i];
                            $("#{{ form.identifiers.vars.id }}").append('<input type="hidden" name="{{ form.identifiers.vars.full_name }}[]" value="'+el.id+'" />');
                        }
                    {%- else -%}
                        $('#{{ form.identifiers.vars.id }} input:hidden').remove();
                        $("#{{ form.identifiers.vars.id }}").append('<input type="hidden" name="{{ form.identifiers.vars.full_name }}[]" value="'+addedItems.id+'" />');
                    {%- endif %}
                    
                }
            });
            autocompleteInput.on("select2:unselect", function(e) {
                console.log("select2:unselect");
                var removedItems = e.params.data;
                // remove input
                if (undefined !== removedItems && null !== removedItems) {

                    if(!$.isArray(removedItems)) {
                        removedItems = [removedItems];
                    }

                    var length = removedItems.length;
                    for (var i = 0; i < length; i++) {
                        el = removedItems[i];
                        $('#{{ form.identifiers.vars.id }} input:hidden[value="'+el.id+'"]').remove();
                    }
                }
            });

            if (undefined==data.length || 0<data.length) { // Leave placeholder if no data set
                console.log(data);
                if($.isArray(data)){
                    $.each(data,function(index,value){
                        autocompleteInput.append('<option selected="selected" value="' + value.id + '">' + value.label + '</option>');
                    });
                }else{
                    autocompleteInput.append('<option selected="selected" value="' + data.id + '">' + data.label + '</option>');
                }
                //autocompleteInput.select2('data', data);
                //autocompleteInput.select2("val",data);
                //console.log(data);
            }
        });
    </script>
{% endspaceless %}

{#
{% spaceless %}
<select type="text" 
        name="{{ full_name }}" 
        id="{{ id }}_autocomplete_input"
        style="width: 300px"
        {% if multiple -%}multiple="multiple"{% endif %}
        {%- if read_only %} readonly="readonly"{% endif -%}
            {%- if disabled %} disabled="disabled"{% endif -%}
                {%- if required %} required="required"{% endif %}
                    >
                    {% if multiple -%}
                        {% if value %}
                            {%- for idx, val in value['selected'] -%}
                                <option {%- if disabled %} disabled="disabled"{% endif %} selected="selected" value="{{ val["id"] }}" >{{ val["text"] }}</option>
                            {%- endfor -%}
                        {% endif %}
                    {% else -%}
                        <option {%- if disabled %} disabled="disabled"{% endif %} value="{{ value['selected'][0]['id']|default('') }}" selected="selected" >{{ value['selected'][0]['text']|default('') }}</option>
                    {% endif -%}
                </select>
                <div id="{{ id }}_hidden_inputs_wrap">
                    {% if multiple -%}
                        {% if value %}
                            {%- for idx, val in value['selected'] -%}
                                <input type="hidden" name="{{ full_name }}[]" {%- if disabled %} disabled="disabled"{% endif %} value="{{ val["id"] }}">
                            {%- endfor -%}
                        {% endif %}
                    {% else -%}
                        <input type="hidden" name="{{ full_name }}" {%- if disabled %} disabled="disabled"{% endif %} value="{{ value['selected'][0]['id']|default('') }}">
                    {% endif -%}
                </div>

                <script type="text/javascript">
                    $(document).ready(function () {

                        var autocompleteInput = $('#{{ id }}_autocomplete_input');

                        $(autocompleteInput).select2({
                            ajax: {
                                url: '{{ url ?: path(route.name, route.parameters|default([])) }}',
                                dataType: 'json',
                                delay: 250,
                                data: function (params) {
                                    return {
                                        '{{ req_param_name_search }}': params.term, // search term
                                        page: params.page,
                                         // page size
                                        '{{ req_param_name_items_per_page }}': {{ items_per_page }},

                                        // page number
                                        '{{ req_param_name_page_number }}': params.page,
                                        'entity_alias': '{{ entity_alias }}',

                                        {% if context == 'filter' %}
                                            'field':  '{{ full_name|replace({'filter[': '', '][value]': '', '__':'.'}) }}',
                                            '_context': 'filter'
                                        {% else %}
                                            'field':  '{{ name }}'
                                        {% endif %}

                                        // other parameters
                                        {% if req_params is not empty %},
                                            {%- for key, value in req_params -%}
                                                '{{- key|e('js') -}}': '{{- value|e('js') -}}'
                                                {%- if not loop.last -%}, {% endif -%}
                                            {%- endfor -%}
                                        {% endif %}
                                    };
                                },
                                processResults: function (data, params) {
                                    // parse the results into the format expected by Select2
                                    // since we are using custom formatting functions we do not need to
                                    // alter the remote JSON data, except to indicate that infinite
                                    // scrolling can be used
                                    params.page = params.page || 1;

                                    return {
                                        results: data.items,
                                        pagination: {
                                            more: data.more
                                        }
                                    };
                                },
                                cache: true
                            },
                            escapeMarkup: function (markup) {
                                return markup;
                            }, // let our custom formatter work
                            minimumInputLength: 1,
                            templateResult: function(item){
                                if(item.loading){
                                    return item.text;
                                }
                                return item.text;
                            }, // omitted for brevity, see the source of this page
                            templateSelection: function(item){
                                if(item.loading){
                                    return item.text;
                                }
                                return item.text;
                            } // omitted for brevity, see the source of this page
                        });

                    autocompleteInput.on('select2:select', function(e) {
                        var addedItems = e.params.data;

                        {% if multiple %}
                            if(!$.isArray(addedItems)) {
                                addedItems = [addedItems];
                            }

                            var length = addedItems.length;
                            for (var i = 0; i < length; i++) {
                                el = addedItems[i];
                                $('#{{ id }}_hidden_inputs_wrap').append('<input type="hidden" name="{{ full_name }}[]" value="'+el.id+'" />');
                            }
                        {%- else -%}
                            $('#{{ id }}_hidden_inputs_wrap input:hidden').val(addedItems.id);
                        {%- endif %}
                    });
                    autocompleteInput.on('select2:unselect', function(e) {
                        var removedItems = e.params.data;

                        {% if multiple %}
                            if(!$.isArray(removedItems)) {
                                removedItems = [removedItems];
                            }

                            var length = removedItems.length;
                            for (var i = 0; i < length; i++) {
                                el = removedItems[i];
                                $('#{{ id }}_hidden_inputs_wrap input:hidden[value="'+el.id+'"]').remove();
                            }
                        {%- else -%}
                            $('#{{ id }}_hidden_inputs_wrap input:hidden').val('');
                        {%- endif %}
                    });
                        });
                </script>
                    {% endspaceless %}#}